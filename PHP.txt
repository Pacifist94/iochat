VARIABLES

*A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:

*A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function:

PHP The global Keyword
*The global keyword is used to access a global variable from within a function.

*PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly.

*PHP The static Keyword
Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job.

To do this, use the static keyword when you first declare the variable:

The PHP var_dump() function returns the data type and value:
var_dump($x);

########PHP Array########
<?php 
$cars = array("Volvo","BMW","Toyota");
var_dump($cars);
?>


########PHP Objects########
class Car {
    function Car() {
        $this->model = "VW";
    }
}
// create an object
$herbie = new Car();

// show object properties
echo $herbie->model;
?>

########PHP NULL Value########
Null is a special data type which can have only one value: NULL.

A variable of data type NULL is a variable that has no value assigned to it.

<?php
$x = "Hello world!";
$x = null;
var_dump($x);
?>

//////// Strings
The PHP strlen() function returns the length of a string.

The PHP str_word_count() function counts the number of words in a string:

The PHP strrev() function reverses a string:

The PHP strpos() function searches for a specific text within a string.
-If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE.
-The example below searches for the text "world" in the string "Hello world!": // outputs 6

The PHP str_replace() function replaces some characters with some other characters in a string.
|echo str_replace("world", "Dolly", "Hello world!"); // outputs Hello Dolly|



########Create a PHP Constant########
To create a constant, use the define() function.

Syntax
define(name, value, case-insensitive)

define("GREETING", "Welcome to W3Schools.com!");
echo GREETING;


########PHP Arithmetic Operators########
+	Addition	$x + $y	Sum of $x and $y	Show it »
-	Subtraction	$x - $y	Difference of $x and $y	Show it »
*	Multiplication	$x * $y	Product of $x and $y	Show it »
/	Division	$x / $y	Quotient of $x and $y	Show it »
%	Modulus	$x % $y	Remainder of $x divided by $y	Show it »
**	Exponentiation	$x ** $y	Result of raising $x to the $y'th power (Introduced in PHP 5.6)

and	And	$x and $y	True if both $x and $y are true	Show it »
or	Or	$x or $y	True if either $x or $y is true	Show it »
xor	Xor	$x xor $y	True if either $x or $y is true, but not both	Show it »
&&	And	$x && $y	True if both $x and $y are true	Show it »
||	Or	$x || $y	True if either $x or $y is true	Show it »
!	Not	!$x	True if $x is not true


######## $k => $v ########
$user_list = array(
    'dave' => 'apassword',
    'steve' => 'secr3t'
);

foreach ($user_list as $user => $pass) {
    echo "{$user}'s pass is: {$pass}\n";
}
// Prints: 
// "dave's pass is: apassword"
// "steve's pass is: secr3t"


######## PHP - The if...elseif....else Statement ########
if (condition) {
    code to be executed if this condition is true;
} elseif (condition) {
    code to be executed if this condition is true;
} else {
    code to be executed if all conditions are false;
}


######## The PHP switch Statement ########
switch (n) {
    case label1:
        code to be executed if n=label1;
        break;
    case label2:
        code to be executed if n=label2;
        break;
    case label3:
        code to be executed if n=label3;
        break;
    ...
    default:
        code to be executed if n is different from all labels;
}

######## PHP Loops ########
Often when you write code, you want the same block of code to run over and over again in a row. Instead of adding several almost equal code-lines in a script, we can use loops to perform a task like this.

In PHP, we have the following looping statements:

while - loops through a block of code as long as the specified condition is true
do...while - loops through a block of code once, and then repeats the loop as long as the specified condition is true
for - loops through a block of code a specified number of times
foreach - loops through a block of code for each element in an array

######## The PHP foreach Loop ########

The foreach loop works only on arrays, and is used to loop through each key/value pair in an array.
For every loop iteration, the value of the current array element is assigned to $value and the array pointer is moved by one, until it reaches the last array element.


<?php 
$colors = array("red", "green", "blue", "yellow"); 

foreach ($colors as $value) {
    echo "$value <br>";
}
?>

######## PHP 5 Functions ########

The real power of PHP comes from its functions; it has more than 1000 built-in functions.

Syntax
function functionName() {
    code to be executed;
}


[PHP Function Arguments]

<?php
function familyName($fname) {
    echo "$fname Refsnes.<br>";
}

familyName("Jani");
familyName("Hege");
familyName("Stale");
familyName("Kai Jim");
familyName("Borge");
?>


[PHP Default Argument Value]
<?php
function setHeight($minheight = 50) {
    echo "The height is : $minheight <br>";
}

setHeight(350);
setHeight(); // will use the default value of 50


[PHP Functions - Returning values]
<?php
function sum($x, $y) {
    $z = $x + $y;
    return $z;
}

echo "5 + 10 = " . sum(5, 10) . "<br>";
echo "7 + 13 = " . sum(7, 13) . "<br>";
echo "2 + 4 = " . sum(2, 4);
?>

######## PHP 5 Arrays ########
<?php
$cars = array("Volvo", "BMW", "Toyota");
echo "I like " . $cars[0] . ", " . $cars[1] . " and " . $cars[2] . ".";
?>

In PHP, there are three types of arrays:

Indexed arrays - Arrays with a numeric index
Associative arrays - Arrays with named keys
Multidimensional arrays - Arrays containing one or more arrays


///PHP Indexed Arrays
There are two ways to create indexed arrays:
The index can be assigned automatically (index always starts at 0), like this:

$cars = array("Volvo", "BMW", "Toyota");

or the index can be assigned manually:

$cars[0] = "Volvo";
$cars[1] = "BMW";
$cars[2] = "Toyota";



-The count() function is used to return the length (the number of elements) of an array:

//Associative arrays are arrays that use named keys that you assign to them.

There are two ways to create an associative array: 

$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

<?php
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
echo "Peter is " . $age['Peter'] . " years old.";
?>

or:

$age['Peter'] = "35";
$age['Ben'] = "37";
$age['Joe'] = "43";

Loop Through an Associative Array

To loop through and print all the values of an associative array, you could use a foreach loop, like this:

<?php
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

foreach($age as $x => $x_value) {
    echo "Key=" . $x . ", Value=" . $x_value;
    echo "<br>";
}
?>


[PHP - Sort Functions For Arrays]

sort() - sort arrays in ascending order
rsort() - sort arrays in descending order
asort() - sort associative arrays in ascending order, according to the value
ksort() - sort associative arrays in ascending order, according to the key
arsort() - sort associative arrays in descending order, according to the value
krsort() - sort associative arrays in descending order, according to the key



######## PHP $_REQUEST ########

<html>
<body>

<form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
  Name: <input type="text" name="fname">
  <input type="submit">
</form>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // collect value of input field
    $name = $_REQUEST['fname'];
    if (empty($name)) {
        echo "Name is empty";
    } else {
        echo $name;
    }
}
?>

</body>
</html>